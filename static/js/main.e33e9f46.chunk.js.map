{"version":3,"sources":["components/Banner/Banner.js","views/Home/HomeView.js","views/Profile/LoginView.js","views/Profile/RegisterView.js","Routes.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","appBar","backgroundColor","title","toolbar","color","Banner","classes","history","useHistory","useOktaAuth","authService","authState","login","a","logout","isPending","className","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","onClick","push","isAuthenticated","Button","HomeView","Container","maxWidth","LoginView","TextField","label","type","margin","width","RegisterView","noValidate","autoComplete","Routes","issuer","clientId","process","redirectUri","window","location","origin","path","component","exact","LoginCallback","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e33e9f46.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Button } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useOktaAuth } from '@okta/okta-react';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    appBar: {\n        backgroundColor: 'primary',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    toolbar: {\n        color: 'secondary',\n    },\n}));\n\n\nconst Banner = () => {\n\n    const classes = useStyles();\n    const history = useHistory();\n\n    const { authService, authState } = useOktaAuth();\n\n    const login = async () => { authService.login('/'); };\n    const logout = async () => { authService.logout('/'); };\n\n    if(authState.isPending) { \n        return <div>Loading...</div>;\n    }\n\n\n    const goHome = () => {\n        history.push('/');\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" className={classes.appBar}>\n                <Toolbar className={classes.toolbar}>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title} onClick={goHome}>\n                        Skills Management\n                    </Typography>\n                    {\n                    !authState.isAuthenticated ?\n                        <Button color=\"inherit\" onClick={login}>Login</Button>\n                        :\n                        <Button color=\"inherit\" onClick={logout}>Logout</Button>\n                    }\n                    {/* <Button color=\"inherit\" onClick={register}>Register</Button> */}\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nexport default Banner;\n","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport { useOktaAuth } from '@okta/okta-react';\n\nimport Banner from '../../components/Banner/Banner';\n\nconst HomeView = () => {\n\n    const { authState } = useOktaAuth();\n\n    if (authState.isPending) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <>\n            <Banner />\n\n            <Container maxWidth=\"lg\">\n                <h1>Welcome</h1>\n                Welcome to the skills management tool.\n        </Container>\n        </>\n    )\n}\n\nexport default HomeView;","import React from 'react';\n\nimport { TextField, Container, Button } from '@material-ui/core';\nimport Banner from '../../components/Banner/Banner';\n\nconst LoginView = () => (\n    <>\n        <Banner/>\n        <Container maxWidth=\"sm\">\n            <h1>Login</h1>\n            <form>\n                <div>\n                    <TextField label=\"Email address\" className=\"text-field\">></TextField>\n                    <TextField label=\"password\" type=\"password\" className=\"text-field\"></TextField>\n                </div>\n                <Button>Login</Button>\n                <Button>Cancel</Button>\n            </form>\n        </Container>\n    </>\n)\n\nexport default LoginView;","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container, Button } from '@material-ui/core';\n\nimport Banner from '../../components/Banner/Banner';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst RegisterView = () => {\n    const classes = useStyles();\n    return (\n        <>\n            <Banner/>\n            <Container maxWidth=\"sm\">\n                <h2>Register a new account</h2>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <div>\n                        <TextField label=\"Full name\" className=\"text-field\"/>\n                        <TextField label=\"Email address\" className=\"text-field\"/>\n                        <TextField label=\"password\" type=\"password\" className=\"text-field\"/>\n                        <TextField label=\"Retype password\" type=\"password\" className=\"text-field\"/>\n                    </div>\n                    <Button>Register</Button>\n                    <Button>Cancel</Button>\n                </form>\n            </Container>\n        </>\n    )\n}\n\nexport default RegisterView;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { SecureRoute, Security, LoginCallback } from '@okta/okta-react';\n\nimport HomeView from './views/Home/HomeView';\nimport LoginView from './views/Profile/LoginView';\n\nimport RegisterView from './views/Profile/RegisterView';\n\nconst Routes = () => {\n    return (\n        <Router>\n            <Security\n                issuer='https://dev-176587.okta.com/oauth2/default'\n                clientId={process.env.REACT_APP_OKTA_CLIENT_ID}\n                redirectUri={window.location.origin + '/implicit/callback'}>\n\n                    <Route path=\"/\" component={HomeView} exact />\n                    <Route path=\"/register\" component={RegisterView} exact />\n                    <SecureRoute path=\"/protected\" component={LoginView} exact />\n                    <Route path=\"/login\" component={LoginView} exact />\n                    <Route path=\"/implicit/callback\" component={LoginCallback} exact />\n            </Security>\n        </Router>\n    )\n}\n\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}